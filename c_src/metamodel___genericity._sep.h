/* This C header file is generated by NIT to compile modules and programs that requires ./metamodel/genericity. */
#ifndef metamodel___genericity_sep
#define metamodel___genericity_sep
#include "metamodel___type_formal._sep.h"
#include <nit_common.h>

extern const classtable_elt_t VFT_metamodel___genericity___MMTypeGeneric[];

extern const classtable_elt_t VFT_metamodel___genericity___MMTypeFormalParameter[];
extern const char LOCATE_metamodel___genericity[];
extern const int SFT_metamodel___genericity[];
#define ATTR_metamodel___genericity___MMLocalClass____types(recv) ATTR(recv, (SFT_metamodel___genericity[0] + 0))
#define ATTR_metamodel___genericity___MMLocalClass____formals_types(recv) ATTR(recv, (SFT_metamodel___genericity[0] + 1))
#define CALL_metamodel___genericity___MMLocalClass___get_formal(recv) ((metamodel___genericity___MMLocalClass___get_formal_t)CALL((recv), (SFT_metamodel___genericity[1] + 0)))
#define CALL_metamodel___genericity___MMLocalClass___register_formal(recv) ((metamodel___genericity___MMLocalClass___register_formal_t)CALL((recv), (SFT_metamodel___genericity[1] + 1)))
#define CALL_metamodel___genericity___MMLocalClass___get_instantiate_type(recv) ((metamodel___genericity___MMLocalClass___get_instantiate_type_t)CALL((recv), (SFT_metamodel___genericity[1] + 2)))
#define CALL_metamodel___genericity___MMLocalClass___formals_types(recv) ((metamodel___genericity___MMLocalClass___formals_types_t)CALL((recv), (SFT_metamodel___genericity[1] + 3)))
#define CALL_SUPER_metamodel___genericity___MMLocalClass___get_type(recv) ((metamodel___genericity___MMLocalClass___get_type_t)CALL((recv), (SFT_metamodel___genericity[1] + 4)))
#define CALL_metamodel___genericity___MMLocalClass___is_generic(recv) ((metamodel___genericity___MMLocalClass___is_generic_t)CALL((recv), (SFT_metamodel___genericity[1] + 5)))
#define CALL_metamodel___genericity___MMType___is_generic(recv) ((metamodel___genericity___MMType___is_generic_t)CALL((recv), (SFT_metamodel___genericity[2] + 0)))
#define ID_metamodel___genericity___MMTypeGeneric (SFT_metamodel___genericity[3])
#define COLOR_metamodel___genericity___MMTypeGeneric (SFT_metamodel___genericity[4])
#define ATTR_metamodel___genericity___MMTypeGeneric____params(recv) ATTR(recv, (SFT_metamodel___genericity[5] + 0))
#define INIT_TABLE_POS_metamodel___genericity___MMTypeGeneric (SFT_metamodel___genericity[6] + 0)
#define CALL_metamodel___genericity___MMTypeGeneric___params(recv) ((metamodel___genericity___MMTypeGeneric___params_t)CALL((recv), (SFT_metamodel___genericity[6] + 1)))
#define CALL_SUPER_metamodel___genericity___MMTypeGeneric___upcast_for(recv) ((metamodel___genericity___MMTypeGeneric___upcast_for_t)CALL((recv), (SFT_metamodel___genericity[6] + 2)))
#define CALL_metamodel___genericity___MMTypeGeneric___params_equals(recv) ((metamodel___genericity___MMTypeGeneric___params_equals_t)CALL((recv), (SFT_metamodel___genericity[6] + 3)))
#define CALL_SUPER_metamodel___genericity___MMTypeGeneric___to_s(recv) ((metamodel___genericity___MMTypeGeneric___to_s_t)CALL((recv), (SFT_metamodel___genericity[6] + 4)))
#define CALL_metamodel___genericity___MMTypeGeneric___is_subtype(recv) ((metamodel___genericity___MMTypeGeneric___is_subtype_t)CALL((recv), (SFT_metamodel___genericity[6] + 5)))
#define CALL_metamodel___genericity___MMTypeGeneric___init(recv) ((metamodel___genericity___MMTypeGeneric___init_t)CALL((recv), (SFT_metamodel___genericity[6] + 6)))
#define ID_metamodel___genericity___MMTypeFormalParameter (SFT_metamodel___genericity[7])
#define COLOR_metamodel___genericity___MMTypeFormalParameter (SFT_metamodel___genericity[8])
#define ATTR_metamodel___genericity___MMTypeFormalParameter____def_class(recv) ATTR(recv, (SFT_metamodel___genericity[9] + 0))
#define ATTR_metamodel___genericity___MMTypeFormalParameter____position(recv) ATTR(recv, (SFT_metamodel___genericity[9] + 1))
#define INIT_TABLE_POS_metamodel___genericity___MMTypeFormalParameter (SFT_metamodel___genericity[10] + 0)
#define CALL_metamodel___genericity___MMTypeFormalParameter___def_class(recv) ((metamodel___genericity___MMTypeFormalParameter___def_class_t)CALL((recv), (SFT_metamodel___genericity[10] + 1)))
#define CALL_metamodel___genericity___MMTypeFormalParameter___position(recv) ((metamodel___genericity___MMTypeFormalParameter___position_t)CALL((recv), (SFT_metamodel___genericity[10] + 2)))
#define CALL_metamodel___genericity___MMTypeFormalParameter___bound__eq(recv) ((metamodel___genericity___MMTypeFormalParameter___bound__eq_t)CALL((recv), (SFT_metamodel___genericity[10] + 3)))
#define CALL_metamodel___genericity___MMTypeFormalParameter___with_bound(recv) ((metamodel___genericity___MMTypeFormalParameter___with_bound_t)CALL((recv), (SFT_metamodel___genericity[10] + 4)))
#define CALL_metamodel___genericity___MMTypeFormalParameter___init(recv) ((metamodel___genericity___MMTypeFormalParameter___init_t)CALL((recv), (SFT_metamodel___genericity[10] + 5)))
val_t metamodel___genericity___MMLocalClass___get_formal(val_t p0, val_t p1);
typedef val_t (*metamodel___genericity___MMLocalClass___get_formal_t)(val_t p0, val_t p1);
void metamodel___genericity___MMLocalClass___register_formal(val_t p0, val_t p1);
typedef void (*metamodel___genericity___MMLocalClass___register_formal_t)(val_t p0, val_t p1);
val_t metamodel___genericity___MMLocalClass___get_instantiate_type(val_t p0, val_t p1);
typedef val_t (*metamodel___genericity___MMLocalClass___get_instantiate_type_t)(val_t p0, val_t p1);
val_t metamodel___genericity___MMLocalClass___formals_types(val_t p0);
typedef val_t (*metamodel___genericity___MMLocalClass___formals_types_t)(val_t p0);
val_t metamodel___genericity___MMLocalClass___get_type(val_t p0);
typedef val_t (*metamodel___genericity___MMLocalClass___get_type_t)(val_t p0);
val_t metamodel___genericity___MMLocalClass___is_generic(val_t p0);
typedef val_t (*metamodel___genericity___MMLocalClass___is_generic_t)(val_t p0);
val_t NEW_MMLocalClass_metamodel___abstractmetamodel___MMLocalClass___init(val_t p0, val_t p1, val_t p2);
val_t metamodel___genericity___MMType___is_generic(val_t p0);
typedef val_t (*metamodel___genericity___MMType___is_generic_t)(val_t p0);
val_t NEW_MMType_metamodel___static_type___MMType___init();
val_t metamodel___genericity___MMTypeFormal___is_generic(val_t p0);
typedef val_t (*metamodel___genericity___MMTypeFormal___is_generic_t)(val_t p0);
val_t NEW_MMTypeFormal_metamodel___type_formal___MMTypeFormal___init(val_t p0, val_t p1);
val_t metamodel___genericity___MMTypeSimpleClass___is_generic(val_t p0);
typedef val_t (*metamodel___genericity___MMTypeSimpleClass___is_generic_t)(val_t p0);
val_t NEW_MMTypeSimpleClass_metamodel___static_type___MMTypeSimpleClass___init(val_t p0);
val_t metamodel___genericity___MMTypeGeneric___params(val_t p0);
typedef val_t (*metamodel___genericity___MMTypeGeneric___params_t)(val_t p0);
val_t metamodel___genericity___MMTypeGeneric___is_generic(val_t p0);
typedef val_t (*metamodel___genericity___MMTypeGeneric___is_generic_t)(val_t p0);
val_t metamodel___genericity___MMTypeGeneric___is_supertype(val_t p0, val_t p1);
typedef val_t (*metamodel___genericity___MMTypeGeneric___is_supertype_t)(val_t p0, val_t p1);
val_t metamodel___genericity___MMTypeGeneric___upcast_for(val_t p0, val_t p1);
typedef val_t (*metamodel___genericity___MMTypeGeneric___upcast_for_t)(val_t p0, val_t p1);
val_t metamodel___genericity___MMTypeGeneric___for_module(val_t p0, val_t p1);
typedef val_t (*metamodel___genericity___MMTypeGeneric___for_module_t)(val_t p0, val_t p1);
val_t metamodel___genericity___MMTypeGeneric___adapt_to(val_t p0, val_t p1);
typedef val_t (*metamodel___genericity___MMTypeGeneric___adapt_to_t)(val_t p0, val_t p1);
val_t metamodel___genericity___MMTypeGeneric___params_equals(val_t p0, val_t p1);
typedef val_t (*metamodel___genericity___MMTypeGeneric___params_equals_t)(val_t p0, val_t p1);
val_t metamodel___genericity___MMTypeGeneric___to_s(val_t p0);
typedef val_t (*metamodel___genericity___MMTypeGeneric___to_s_t)(val_t p0);
val_t metamodel___genericity___MMTypeGeneric___is_subtype(val_t p0, val_t p1);
typedef val_t (*metamodel___genericity___MMTypeGeneric___is_subtype_t)(val_t p0, val_t p1);
void metamodel___genericity___MMTypeGeneric___init(val_t p0, val_t p1, val_t p2, int* init_table);
typedef void (*metamodel___genericity___MMTypeGeneric___init_t)(val_t p0, val_t p1, val_t p2, int* init_table);
val_t NEW_MMTypeGeneric_metamodel___genericity___MMTypeGeneric___init(val_t p0, val_t p1);
val_t metamodel___genericity___MMTypeFormalParameter___def_class(val_t p0);
typedef val_t (*metamodel___genericity___MMTypeFormalParameter___def_class_t)(val_t p0);
val_t metamodel___genericity___MMTypeFormalParameter___position(val_t p0);
typedef val_t (*metamodel___genericity___MMTypeFormalParameter___position_t)(val_t p0);
val_t metamodel___genericity___MMTypeFormalParameter___mmmodule(val_t p0);
typedef val_t (*metamodel___genericity___MMTypeFormalParameter___mmmodule_t)(val_t p0);
val_t metamodel___genericity___MMTypeFormalParameter___for_module(val_t p0, val_t p1);
typedef val_t (*metamodel___genericity___MMTypeFormalParameter___for_module_t)(val_t p0, val_t p1);
val_t metamodel___genericity___MMTypeFormalParameter___upcast_for(val_t p0, val_t p1);
typedef val_t (*metamodel___genericity___MMTypeFormalParameter___upcast_for_t)(val_t p0, val_t p1);
void metamodel___genericity___MMTypeFormalParameter___bound__eq(val_t p0, val_t p1);
typedef void (*metamodel___genericity___MMTypeFormalParameter___bound__eq_t)(val_t p0, val_t p1);
val_t metamodel___genericity___MMTypeFormalParameter___adapt_to(val_t p0, val_t p1);
typedef val_t (*metamodel___genericity___MMTypeFormalParameter___adapt_to_t)(val_t p0, val_t p1);
void metamodel___genericity___MMTypeFormalParameter___with_bound(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4, int* init_table);
typedef void (*metamodel___genericity___MMTypeFormalParameter___with_bound_t)(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4, int* init_table);
val_t NEW_MMTypeFormalParameter_metamodel___genericity___MMTypeFormalParameter___with_bound(val_t p0, val_t p1, val_t p2, val_t p3);
void metamodel___genericity___MMTypeFormalParameter___init(val_t p0, val_t p1, val_t p2, val_t p3, int* init_table);
typedef void (*metamodel___genericity___MMTypeFormalParameter___init_t)(val_t p0, val_t p1, val_t p2, val_t p3, int* init_table);
val_t NEW_MMTypeFormalParameter_metamodel___genericity___MMTypeFormalParameter___init(val_t p0, val_t p1, val_t p2);
val_t metamodel___genericity___MMTypeNone___is_generic(val_t p0);
typedef val_t (*metamodel___genericity___MMTypeNone___is_generic_t)(val_t p0);
val_t metamodel___genericity___MMTypeNone___for_module(val_t p0, val_t p1);
typedef val_t (*metamodel___genericity___MMTypeNone___for_module_t)(val_t p0, val_t p1);
val_t metamodel___genericity___MMTypeNone___adapt_to(val_t p0, val_t p1);
typedef val_t (*metamodel___genericity___MMTypeNone___adapt_to_t)(val_t p0, val_t p1);
val_t NEW_MMTypeNone_metamodel___static_type___MMTypeNone___init(val_t p0);
#endif
