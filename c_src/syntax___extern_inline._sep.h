/* This C header file is generated by NIT to compile modules and programs that requires ./syntax/extern_inline. */
#ifndef syntax___extern_inline_sep
#define syntax___extern_inline_sep
#include "syntax___mmbuilder._sep.h"
#include <nit_common.h>

extern const classtable_elt_t VFT_syntax___extern_inline___ExternCode[];
extern const char LOCATE_syntax___extern_inline[];
extern const int SFT_syntax___extern_inline[];
#define ID_syntax___extern_inline___ExternCode (SFT_syntax___extern_inline[0])
#define COLOR_syntax___extern_inline___ExternCode (SFT_syntax___extern_inline[1])
#define ATTR_syntax___extern_inline___ExternCode_____atlanguage(recv) ATTR(recv, (SFT_syntax___extern_inline[2] + 0))
#define ATTR_syntax___extern_inline___ExternCode_____atcode(recv) ATTR(recv, (SFT_syntax___extern_inline[2] + 1))
#define ATTR_syntax___extern_inline___ExternCode_____atlocation(recv) ATTR(recv, (SFT_syntax___extern_inline[2] + 2))
#define INIT_TABLE_POS_syntax___extern_inline___ExternCode (SFT_syntax___extern_inline[3] + 0)
#define CALL_syntax___extern_inline___ExternCode___language(recv) ((syntax___extern_inline___ExternCode___language_t)CALL((recv), (SFT_syntax___extern_inline[3] + 1)))
#define CALL_syntax___extern_inline___ExternCode___language__eq(recv) ((syntax___extern_inline___ExternCode___language__eq_t)CALL((recv), (SFT_syntax___extern_inline[3] + 2)))
#define CALL_syntax___extern_inline___ExternCode___code(recv) ((syntax___extern_inline___ExternCode___code_t)CALL((recv), (SFT_syntax___extern_inline[3] + 3)))
#define CALL_syntax___extern_inline___ExternCode___code__eq(recv) ((syntax___extern_inline___ExternCode___code__eq_t)CALL((recv), (SFT_syntax___extern_inline[3] + 4)))
#define CALL_syntax___extern_inline___ExternCode___location(recv) ((syntax___extern_inline___ExternCode___location_t)CALL((recv), (SFT_syntax___extern_inline[3] + 5)))
#define CALL_syntax___extern_inline___ExternCode___location__eq(recv) ((syntax___extern_inline___ExternCode___location__eq_t)CALL((recv), (SFT_syntax___extern_inline[3] + 6)))
#define CALL_syntax___extern_inline___ExternCode___init(recv) ((syntax___extern_inline___ExternCode___init_t)CALL((recv), (SFT_syntax___extern_inline[3] + 7)))
#define ATTR_syntax___extern_inline___MMModule_____atextern_code_blocks(recv) ATTR(recv, (SFT_syntax___extern_inline[4] + 0))
#define ATTR_syntax___extern_inline___MMModule_____atuses_ffi(recv) ATTR(recv, (SFT_syntax___extern_inline[4] + 1))
#define CALL_syntax___extern_inline___MMModule___extern_code_blocks(recv) ((syntax___extern_inline___MMModule___extern_code_blocks_t)CALL((recv), (SFT_syntax___extern_inline[5] + 0)))
#define CALL_syntax___extern_inline___MMModule___extern_code_blocks__eq(recv) ((syntax___extern_inline___MMModule___extern_code_blocks__eq_t)CALL((recv), (SFT_syntax___extern_inline[5] + 1)))
#define CALL_syntax___extern_inline___MMModule___uses_ffi__eq(recv) ((syntax___extern_inline___MMModule___uses_ffi__eq_t)CALL((recv), (SFT_syntax___extern_inline[5] + 2)))
#define ATTR_syntax___extern_inline___MMLocalClass_____atextern_type(recv) ATTR(recv, (SFT_syntax___extern_inline[6] + 0))
#define CALL_syntax___extern_inline___MMLocalClass___extern_type(recv) ((syntax___extern_inline___MMLocalClass___extern_type_t)CALL((recv), (SFT_syntax___extern_inline[7] + 0)))
#define CALL_syntax___extern_inline___MMLocalClass___extern_type__eq(recv) ((syntax___extern_inline___MMLocalClass___extern_type__eq_t)CALL((recv), (SFT_syntax___extern_inline[7] + 1)))
#define ATTR_syntax___extern_inline___MMMethod_____atextern_implementation(recv) ATTR(recv, (SFT_syntax___extern_inline[8] + 0))
#define CALL_syntax___extern_inline___MMMethod___extern_implementation(recv) ((syntax___extern_inline___MMMethod___extern_implementation_t)CALL((recv), (SFT_syntax___extern_inline[9] + 0)))
#define CALL_syntax___extern_inline___MMMethod___extern_implementation__eq(recv) ((syntax___extern_inline___MMMethod___extern_implementation__eq_t)CALL((recv), (SFT_syntax___extern_inline[9] + 1)))
#define CALL_syntax___extern_inline___TExternCodeSegment___code(recv) ((syntax___extern_inline___TExternCodeSegment___code_t)CALL((recv), (SFT_syntax___extern_inline[10] + 0)))
#define CALL_syntax___extern_inline___AExternCodeBlock___to_extern_code(recv) ((syntax___extern_inline___AExternCodeBlock___to_extern_code_t)CALL((recv), (SFT_syntax___extern_inline[11] + 0)))
#define CALL_SUPER_syntax___extern_inline___AExternPropdef___accept_property_verifier(recv) ((syntax___extern_inline___AExternPropdef___accept_property_verifier_t)CALL((recv), (SFT_syntax___extern_inline[12] + 0)))
#define CALL_SUPER_syntax___extern_inline___AStdClassdef___accept_property_verifier(recv) ((syntax___extern_inline___AStdClassdef___accept_property_verifier_t)CALL((recv), (SFT_syntax___extern_inline[13] + 0)))
#define CALL_SUPER_syntax___extern_inline___MMSrcModule___do_mmbuilder(recv) ((syntax___extern_inline___MMSrcModule___do_mmbuilder_t)CALL((recv), (SFT_syntax___extern_inline[14] + 0)))
val_t syntax___extern_inline___ExternCode___language(val_t p0);
typedef val_t (*syntax___extern_inline___ExternCode___language_t)(val_t p0);
void syntax___extern_inline___ExternCode___language__eq(val_t p0, val_t p1);
typedef void (*syntax___extern_inline___ExternCode___language__eq_t)(val_t p0, val_t p1);
val_t syntax___extern_inline___ExternCode___code(val_t p0);
typedef val_t (*syntax___extern_inline___ExternCode___code_t)(val_t p0);
void syntax___extern_inline___ExternCode___code__eq(val_t p0, val_t p1);
typedef void (*syntax___extern_inline___ExternCode___code__eq_t)(val_t p0, val_t p1);
val_t syntax___extern_inline___ExternCode___location(val_t p0);
typedef val_t (*syntax___extern_inline___ExternCode___location_t)(val_t p0);
void syntax___extern_inline___ExternCode___location__eq(val_t p0, val_t p1);
typedef void (*syntax___extern_inline___ExternCode___location__eq_t)(val_t p0, val_t p1);
void syntax___extern_inline___ExternCode___init(val_t p0, val_t p1, val_t p2, val_t p3, int* init_table);
typedef void (*syntax___extern_inline___ExternCode___init_t)(val_t p0, val_t p1, val_t p2, val_t p3, int* init_table);
val_t NEW_ExternCode_syntax___extern_inline___ExternCode___init(val_t p0, val_t p1, val_t p2);
val_t syntax___extern_inline___MMModule___extern_code_blocks(val_t p0);
typedef val_t (*syntax___extern_inline___MMModule___extern_code_blocks_t)(val_t p0);
void syntax___extern_inline___MMModule___extern_code_blocks__eq(val_t p0, val_t p1);
typedef void (*syntax___extern_inline___MMModule___extern_code_blocks__eq_t)(val_t p0, val_t p1);
val_t syntax___extern_inline___MMModule___uses_ffi(val_t p0);
typedef val_t (*syntax___extern_inline___MMModule___uses_ffi_t)(val_t p0);
void syntax___extern_inline___MMModule___uses_ffi__eq(val_t p0, val_t p1);
typedef void (*syntax___extern_inline___MMModule___uses_ffi__eq_t)(val_t p0, val_t p1);
val_t NEW_MMModule_metamodel___abstractmetamodel___MMModule___init(val_t p0, val_t p1, val_t p2, val_t p3);
val_t syntax___extern_inline___MMLocalClass___extern_type(val_t p0);
typedef val_t (*syntax___extern_inline___MMLocalClass___extern_type_t)(val_t p0);
void syntax___extern_inline___MMLocalClass___extern_type__eq(val_t p0, val_t p1);
typedef void (*syntax___extern_inline___MMLocalClass___extern_type__eq_t)(val_t p0, val_t p1);
val_t NEW_MMLocalClass_metamodel___abstractmetamodel___MMLocalClass___init(val_t p0, val_t p1, val_t p2);
val_t syntax___extern_inline___MMMethod___extern_implementation(val_t p0);
typedef val_t (*syntax___extern_inline___MMMethod___extern_implementation_t)(val_t p0);
void syntax___extern_inline___MMMethod___extern_implementation__eq(val_t p0, val_t p1);
typedef void (*syntax___extern_inline___MMMethod___extern_implementation__eq_t)(val_t p0, val_t p1);
val_t NEW_MMMethod_metamodel___abstractmetamodel___MMLocalProperty___init(val_t p0, val_t p1);
val_t syntax___extern_inline___TExternCodeSegment___code(val_t p0);
typedef val_t (*syntax___extern_inline___TExternCodeSegment___code_t)(val_t p0);
val_t NEW_TExternCodeSegment_parser___lexer___TExternCodeSegment___init_tk(val_t p0);
val_t NEW_TExternCodeSegment_parser___parser_nodes___ANode___init();
val_t syntax___extern_inline___AExternCodeBlock___to_extern_code(val_t p0);
typedef val_t (*syntax___extern_inline___AExternCodeBlock___to_extern_code_t)(val_t p0);
val_t NEW_AExternCodeBlock_parser___parser_prod___AExternCodeBlock___empty_init();
val_t NEW_AExternCodeBlock_parser___parser_prod___AExternCodeBlock___init_aexterncodeblock(val_t p0, val_t p1);
val_t NEW_AExternCodeBlock_parser___parser_nodes___ANode___init();
void syntax___extern_inline___AExternPropdef___accept_property_verifier(val_t p0, val_t p1);
typedef void (*syntax___extern_inline___AExternPropdef___accept_property_verifier_t)(val_t p0, val_t p1);
val_t NEW_AExternPropdef_parser___parser_nodes___ANode___init();
val_t NEW_AExternPropdef_parser___parser_prod___AMethPropdef___empty_init();
val_t NEW_AExternPropdef_parser___parser_prod___AMethPropdef___init_amethpropdef(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
void syntax___extern_inline___AStdClassdef___accept_property_verifier(val_t p0, val_t p1);
typedef void (*syntax___extern_inline___AStdClassdef___accept_property_verifier_t)(val_t p0, val_t p1);
val_t NEW_AStdClassdef_parser___parser_prod___AStdClassdef___empty_init();
val_t NEW_AStdClassdef_parser___parser_prod___AStdClassdef___init_astdclassdef(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4, val_t p5, val_t p6, val_t p7, val_t p8, val_t p9);
val_t NEW_AStdClassdef_parser___parser_nodes___ANode___init();
void syntax___extern_inline___MMSrcModule___do_mmbuilder(val_t p0, val_t p1);
typedef void (*syntax___extern_inline___MMSrcModule___do_mmbuilder_t)(val_t p0, val_t p1);
  typedef void (*CLOS_OC_syntax___extern_inline___MMSrcModule___do_mmbuilder_1_0)(struct stack_frame_t *);
  void OC_syntax___extern_inline___MMSrcModule___do_mmbuilder_1(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
  typedef void (*OC_syntax___extern_inline___MMSrcModule___do_mmbuilder_1_t)(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
val_t NEW_MMSrcModule_syntax___syntax_base___MMSrcModule___init(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
#endif
