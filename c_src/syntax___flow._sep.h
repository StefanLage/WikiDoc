/* This C header file is generated by NIT to compile modules and programs that requires ./syntax/flow. */
#ifndef syntax___flow_sep
#define syntax___flow_sep
#include "syntax___syntax_base._sep.h"
#include <nit_common.h>

extern const classtable_elt_t VFT_syntax___flow___FlowContext[];

extern const classtable_elt_t VFT_syntax___flow___RootFlowContext[];

extern const classtable_elt_t VFT_syntax___flow___SubFlowContext[];

extern const classtable_elt_t VFT_syntax___flow___CastFlowContext[];

extern const classtable_elt_t VFT_syntax___flow___MergeFlowContext[];
extern const char LOCATE_syntax___flow[];
extern const int SFT_syntax___flow[];
#define ID_syntax___flow___FlowContext (SFT_syntax___flow[0])
#define COLOR_syntax___flow___FlowContext (SFT_syntax___flow[1])
#define ATTR_syntax___flow___FlowContext____visitor(recv) ATTR(recv, (SFT_syntax___flow[2] + 0))
#define ATTR_syntax___flow___FlowContext____node(recv) ATTR(recv, (SFT_syntax___flow[2] + 1))
#define ATTR_syntax___flow___FlowContext____unreash(recv) ATTR(recv, (SFT_syntax___flow[2] + 2))
#define ATTR_syntax___flow___FlowContext____already_unreash(recv) ATTR(recv, (SFT_syntax___flow[2] + 3))
#define ATTR_syntax___flow___FlowContext____set_variables(recv) ATTR(recv, (SFT_syntax___flow[2] + 4))
#define INIT_TABLE_POS_syntax___flow___FlowContext (SFT_syntax___flow[3] + 0)
#define CALL_syntax___flow___FlowContext___check_is_set(recv) ((syntax___flow___FlowContext___check_is_set_t)CALL((recv), (SFT_syntax___flow[3] + 1)))
#define CALL_syntax___flow___FlowContext___stype(recv) ((syntax___flow___FlowContext___stype_t)CALL((recv), (SFT_syntax___flow[3] + 2)))
#define CALL_syntax___flow___FlowContext___sub_setvariable(recv) ((syntax___flow___FlowContext___sub_setvariable_t)CALL((recv), (SFT_syntax___flow[3] + 3)))
#define CALL_syntax___flow___FlowContext___sub_unreash(recv) ((syntax___flow___FlowContext___sub_unreash_t)CALL((recv), (SFT_syntax___flow[3] + 4)))
#define CALL_syntax___flow___FlowContext___sub_with(recv) ((syntax___flow___FlowContext___sub_with_t)CALL((recv), (SFT_syntax___flow[3] + 5)))
#define CALL_syntax___flow___FlowContext___merge(recv) ((syntax___flow___FlowContext___merge_t)CALL((recv), (SFT_syntax___flow[3] + 6)))
#define CALL_syntax___flow___FlowContext___merge_reash(recv) ((syntax___flow___FlowContext___merge_reash_t)CALL((recv), (SFT_syntax___flow[3] + 7)))
#define CALL_syntax___flow___FlowContext___node(recv) ((syntax___flow___FlowContext___node_t)CALL((recv), (SFT_syntax___flow[3] + 8)))
#define CALL_syntax___flow___FlowContext___init(recv) ((syntax___flow___FlowContext___init_t)CALL((recv), (SFT_syntax___flow[3] + 9)))
#define CALL_syntax___flow___FlowContext___unreash(recv) ((syntax___flow___FlowContext___unreash_t)CALL((recv), (SFT_syntax___flow[3] + 10)))
#define CALL_syntax___flow___FlowContext___already_unreash(recv) ((syntax___flow___FlowContext___already_unreash_t)CALL((recv), (SFT_syntax___flow[3] + 11)))
#define CALL_syntax___flow___FlowContext___already_unreash__eq(recv) ((syntax___flow___FlowContext___already_unreash__eq_t)CALL((recv), (SFT_syntax___flow[3] + 12)))
#define CALL_syntax___flow___FlowContext___set_variables(recv) ((syntax___flow___FlowContext___set_variables_t)CALL((recv), (SFT_syntax___flow[3] + 13)))
#define CALL_syntax___flow___FlowContext___is_set(recv) ((syntax___flow___FlowContext___is_set_t)CALL((recv), (SFT_syntax___flow[3] + 14)))
#define ID_syntax___flow___RootFlowContext (SFT_syntax___flow[4])
#define COLOR_syntax___flow___RootFlowContext (SFT_syntax___flow[5])
#define INIT_TABLE_POS_syntax___flow___RootFlowContext (SFT_syntax___flow[6] + 0)
#define CALL_syntax___flow___RootFlowContext___init(recv) ((syntax___flow___RootFlowContext___init_t)CALL((recv), (SFT_syntax___flow[6] + 1)))
#define ID_syntax___flow___SubFlowContext (SFT_syntax___flow[7])
#define COLOR_syntax___flow___SubFlowContext (SFT_syntax___flow[8])
#define ATTR_syntax___flow___SubFlowContext____prev(recv) ATTR(recv, (SFT_syntax___flow[9] + 0))
#define INIT_TABLE_POS_syntax___flow___SubFlowContext (SFT_syntax___flow[10] + 0)
#define CALL_syntax___flow___SubFlowContext___prev(recv) ((syntax___flow___SubFlowContext___prev_t)CALL((recv), (SFT_syntax___flow[10] + 1)))
#define CALL_syntax___flow___SubFlowContext___with_prev(recv) ((syntax___flow___SubFlowContext___with_prev_t)CALL((recv), (SFT_syntax___flow[10] + 2)))
#define ID_syntax___flow___CastFlowContext (SFT_syntax___flow[11])
#define COLOR_syntax___flow___CastFlowContext (SFT_syntax___flow[12])
#define ATTR_syntax___flow___CastFlowContext____variable(recv) ATTR(recv, (SFT_syntax___flow[13] + 0))
#define ATTR_syntax___flow___CastFlowContext____stype(recv) ATTR(recv, (SFT_syntax___flow[13] + 1))
#define INIT_TABLE_POS_syntax___flow___CastFlowContext (SFT_syntax___flow[14] + 0)
#define CALL_syntax___flow___CastFlowContext___init(recv) ((syntax___flow___CastFlowContext___init_t)CALL((recv), (SFT_syntax___flow[14] + 1)))
#define ID_syntax___flow___MergeFlowContext (SFT_syntax___flow[15])
#define COLOR_syntax___flow___MergeFlowContext (SFT_syntax___flow[16])
#define ATTR_syntax___flow___MergeFlowContext____base(recv) ATTR(recv, (SFT_syntax___flow[17] + 0))
#define ATTR_syntax___flow___MergeFlowContext____alts(recv) ATTR(recv, (SFT_syntax___flow[17] + 1))
#define ATTR_syntax___flow___MergeFlowContext____stypes(recv) ATTR(recv, (SFT_syntax___flow[17] + 2))
#define INIT_TABLE_POS_syntax___flow___MergeFlowContext (SFT_syntax___flow[18] + 0)
#define CALL_syntax___flow___MergeFlowContext___init(recv) ((syntax___flow___MergeFlowContext___init_t)CALL((recv), (SFT_syntax___flow[18] + 1)))
#define CALL_syntax___flow___MergeFlowContext___merge_stype(recv) ((syntax___flow___MergeFlowContext___merge_stype_t)CALL((recv), (SFT_syntax___flow[18] + 2)))
#define CALL_syntax___flow___Variable___must_be_set(recv) ((syntax___flow___Variable___must_be_set_t)CALL((recv), (SFT_syntax___flow[19] + 0)))
void syntax___flow___FlowContext___check_is_set(val_t p0, val_t p1, val_t p2);
typedef void (*syntax___flow___FlowContext___check_is_set_t)(val_t p0, val_t p1, val_t p2);
val_t syntax___flow___FlowContext___stype(val_t p0, val_t p1);
typedef val_t (*syntax___flow___FlowContext___stype_t)(val_t p0, val_t p1);
val_t syntax___flow___FlowContext___sub_setvariable(val_t p0, val_t p1);
typedef val_t (*syntax___flow___FlowContext___sub_setvariable_t)(val_t p0, val_t p1);
val_t syntax___flow___FlowContext___sub_unreash(val_t p0, val_t p1);
typedef val_t (*syntax___flow___FlowContext___sub_unreash_t)(val_t p0, val_t p1);
val_t syntax___flow___FlowContext___sub_with(val_t p0, val_t p1, val_t p2, val_t p3);
typedef val_t (*syntax___flow___FlowContext___sub_with_t)(val_t p0, val_t p1, val_t p2, val_t p3);
val_t syntax___flow___FlowContext___merge(val_t p0, val_t p1, val_t p2);
typedef val_t (*syntax___flow___FlowContext___merge_t)(val_t p0, val_t p1, val_t p2);
val_t syntax___flow___FlowContext___merge_reash(val_t p0, val_t p1, val_t p2, val_t p3);
typedef val_t (*syntax___flow___FlowContext___merge_reash_t)(val_t p0, val_t p1, val_t p2, val_t p3);
val_t syntax___flow___FlowContext___node(val_t p0);
typedef val_t (*syntax___flow___FlowContext___node_t)(val_t p0);
void syntax___flow___FlowContext___init(val_t p0, val_t p1, val_t p2, int* init_table);
typedef void (*syntax___flow___FlowContext___init_t)(val_t p0, val_t p1, val_t p2, int* init_table);
val_t NEW_FlowContext_syntax___flow___FlowContext___init(val_t p0, val_t p1);
val_t syntax___flow___FlowContext___unreash(val_t p0);
typedef val_t (*syntax___flow___FlowContext___unreash_t)(val_t p0);
val_t syntax___flow___FlowContext___already_unreash(val_t p0);
typedef val_t (*syntax___flow___FlowContext___already_unreash_t)(val_t p0);
void syntax___flow___FlowContext___already_unreash__eq(val_t p0, val_t p1);
typedef void (*syntax___flow___FlowContext___already_unreash__eq_t)(val_t p0, val_t p1);
val_t syntax___flow___FlowContext___set_variables(val_t p0);
typedef val_t (*syntax___flow___FlowContext___set_variables_t)(val_t p0);
val_t syntax___flow___FlowContext___is_set(val_t p0, val_t p1);
typedef val_t (*syntax___flow___FlowContext___is_set_t)(val_t p0, val_t p1);
void syntax___flow___RootFlowContext___init(val_t p0, val_t p1, val_t p2, int* init_table);
typedef void (*syntax___flow___RootFlowContext___init_t)(val_t p0, val_t p1, val_t p2, int* init_table);
val_t NEW_RootFlowContext_syntax___flow___RootFlowContext___init(val_t p0, val_t p1);
val_t syntax___flow___SubFlowContext___prev(val_t p0);
typedef val_t (*syntax___flow___SubFlowContext___prev_t)(val_t p0);
val_t syntax___flow___SubFlowContext___is_set(val_t p0, val_t p1);
typedef val_t (*syntax___flow___SubFlowContext___is_set_t)(val_t p0, val_t p1);
val_t syntax___flow___SubFlowContext___stype(val_t p0, val_t p1);
typedef val_t (*syntax___flow___SubFlowContext___stype_t)(val_t p0, val_t p1);
void syntax___flow___SubFlowContext___with_prev(val_t p0, val_t p1, val_t p2, int* init_table);
typedef void (*syntax___flow___SubFlowContext___with_prev_t)(val_t p0, val_t p1, val_t p2, int* init_table);
val_t NEW_SubFlowContext_syntax___flow___SubFlowContext___with_prev(val_t p0, val_t p1);
val_t syntax___flow___CastFlowContext___stype(val_t p0, val_t p1);
typedef val_t (*syntax___flow___CastFlowContext___stype_t)(val_t p0, val_t p1);
void syntax___flow___CastFlowContext___init(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4, int* init_table);
typedef void (*syntax___flow___CastFlowContext___init_t)(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4, int* init_table);
val_t NEW_CastFlowContext_syntax___flow___CastFlowContext___init(val_t p0, val_t p1, val_t p2, val_t p3);
void syntax___flow___MergeFlowContext___init(val_t p0, val_t p1, val_t p2, val_t p3, int* init_table);
typedef void (*syntax___flow___MergeFlowContext___init_t)(val_t p0, val_t p1, val_t p2, val_t p3, int* init_table);
val_t NEW_MergeFlowContext_syntax___flow___MergeFlowContext___init(val_t p0, val_t p1, val_t p2);
val_t syntax___flow___MergeFlowContext___stype(val_t p0, val_t p1);
typedef val_t (*syntax___flow___MergeFlowContext___stype_t)(val_t p0, val_t p1);
val_t syntax___flow___MergeFlowContext___merge_stype(val_t p0, val_t p1);
typedef val_t (*syntax___flow___MergeFlowContext___merge_stype_t)(val_t p0, val_t p1);
val_t syntax___flow___MergeFlowContext___is_set(val_t p0, val_t p1);
typedef val_t (*syntax___flow___MergeFlowContext___is_set_t)(val_t p0, val_t p1);
val_t syntax___flow___Variable___must_be_set(val_t p0);
typedef val_t (*syntax___flow___Variable___must_be_set_t)(val_t p0);
val_t NEW_Variable_syntax___syntax_base___Variable___init(val_t p0, val_t p1);
val_t syntax___flow___VarVariable___must_be_set(val_t p0);
typedef val_t (*syntax___flow___VarVariable___must_be_set_t)(val_t p0);
val_t NEW_VarVariable_syntax___syntax_base___VarVariable___init(val_t p0, val_t p1);
#endif
