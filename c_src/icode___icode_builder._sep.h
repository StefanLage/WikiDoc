/* This C header file is generated by NIT to compile modules and programs that requires ./icode/icode_builder. */
#ifndef icode___icode_builder_sep
#define icode___icode_builder_sep
#include "icode___icode_base._sep.h"
#include <nit_common.h>

extern const classtable_elt_t VFT_icode___icode_builder___ICodeBuilder[];
extern const char LOCATE_icode___icode_builder[];
extern const int SFT_icode___icode_builder[];
#define ID_icode___icode_builder___ICodeBuilder (SFT_icode___icode_builder[0])
#define COLOR_icode___icode_builder___ICodeBuilder (SFT_icode___icode_builder[1])
#define ATTR_icode___icode_builder___ICodeBuilder____mmmodule(recv) ATTR(recv, (SFT_icode___icode_builder[2] + 0))
#define ATTR_icode___icode_builder___ICodeBuilder____iroutine(recv) ATTR(recv, (SFT_icode___icode_builder[2] + 1))
#define ATTR_icode___icode_builder___ICodeBuilder____seq(recv) ATTR(recv, (SFT_icode___icode_builder[2] + 2))
#define ATTR_icode___icode_builder___ICodeBuilder____current_location(recv) ATTR(recv, (SFT_icode___icode_builder[2] + 3))
#define INIT_TABLE_POS_icode___icode_builder___ICodeBuilder (SFT_icode___icode_builder[3] + 0)
#define CALL_icode___icode_builder___ICodeBuilder___stmt(recv) ((icode___icode_builder___ICodeBuilder___stmt_t)CALL((recv), (SFT_icode___icode_builder[3] + 1)))
#define CALL_icode___icode_builder___ICodeBuilder___expr(recv) ((icode___icode_builder___ICodeBuilder___expr_t)CALL((recv), (SFT_icode___icode_builder[3] + 2)))
#define CALL_icode___icode_builder___ICodeBuilder___add_assignment(recv) ((icode___icode_builder___ICodeBuilder___add_assignment_t)CALL((recv), (SFT_icode___icode_builder[3] + 3)))
#define CALL_icode___icode_builder___ICodeBuilder___add_null_reciever_check(recv) ((icode___icode_builder___ICodeBuilder___add_null_reciever_check_t)CALL((recv), (SFT_icode___icode_builder[3] + 4)))
#define CALL_icode___icode_builder___ICodeBuilder___add_type_cast(recv) ((icode___icode_builder___ICodeBuilder___add_type_cast_t)CALL((recv), (SFT_icode___icode_builder[3] + 5)))
#define CALL_icode___icode_builder___ICodeBuilder___add_attr_check(recv) ((icode___icode_builder___ICodeBuilder___add_attr_check_t)CALL((recv), (SFT_icode___icode_builder[3] + 6)))
#define CALL_icode___icode_builder___ICodeBuilder___add_attr_read(recv) ((icode___icode_builder___ICodeBuilder___add_attr_read_t)CALL((recv), (SFT_icode___icode_builder[3] + 7)))
#define CALL_icode___icode_builder___ICodeBuilder___add_abort(recv) ((icode___icode_builder___ICodeBuilder___add_abort_t)CALL((recv), (SFT_icode___icode_builder[3] + 8)))
#define CALL_icode___icode_builder___ICodeBuilder___add_return_value(recv) ((icode___icode_builder___ICodeBuilder___add_return_value_t)CALL((recv), (SFT_icode___icode_builder[3] + 9)))
#define CALL_icode___icode_builder___ICodeBuilder___add_call(recv) ((icode___icode_builder___ICodeBuilder___add_call_t)CALL((recv), (SFT_icode___icode_builder[3] + 10)))
#define CALL_icode___icode_builder___ICodeBuilder___add_escape(recv) ((icode___icode_builder___ICodeBuilder___add_escape_t)CALL((recv), (SFT_icode___icode_builder[3] + 11)))
#define CALL_icode___icode_builder___ICodeBuilder___lit_null_reg(recv) ((icode___icode_builder___ICodeBuilder___lit_null_reg_t)CALL((recv), (SFT_icode___icode_builder[3] + 12)))
#define CALL_icode___icode_builder___ICodeBuilder___lit_true_reg(recv) ((icode___icode_builder___ICodeBuilder___lit_true_reg_t)CALL((recv), (SFT_icode___icode_builder[3] + 13)))
#define CALL_icode___icode_builder___ICodeBuilder___lit_false_reg(recv) ((icode___icode_builder___ICodeBuilder___lit_false_reg_t)CALL((recv), (SFT_icode___icode_builder[3] + 14)))
#define CALL_icode___icode_builder___ICodeBuilder___new_register(recv) ((icode___icode_builder___ICodeBuilder___new_register_t)CALL((recv), (SFT_icode___icode_builder[3] + 15)))
#define CALL_icode___icode_builder___ICodeBuilder___mmmodule(recv) ((icode___icode_builder___ICodeBuilder___mmmodule_t)CALL((recv), (SFT_icode___icode_builder[3] + 16)))
#define CALL_icode___icode_builder___ICodeBuilder___iroutine(recv) ((icode___icode_builder___ICodeBuilder___iroutine_t)CALL((recv), (SFT_icode___icode_builder[3] + 17)))
#define CALL_icode___icode_builder___ICodeBuilder___seq(recv) ((icode___icode_builder___ICodeBuilder___seq_t)CALL((recv), (SFT_icode___icode_builder[3] + 18)))
#define CALL_icode___icode_builder___ICodeBuilder___seq__eq(recv) ((icode___icode_builder___ICodeBuilder___seq__eq_t)CALL((recv), (SFT_icode___icode_builder[3] + 19)))
#define CALL_icode___icode_builder___ICodeBuilder___init(recv) ((icode___icode_builder___ICodeBuilder___init_t)CALL((recv), (SFT_icode___icode_builder[3] + 20)))
#define CALL_icode___icode_builder___ICodeBuilder___current_location(recv) ((icode___icode_builder___ICodeBuilder___current_location_t)CALL((recv), (SFT_icode___icode_builder[3] + 21)))
#define CALL_icode___icode_builder___ICodeBuilder___current_location__eq(recv) ((icode___icode_builder___ICodeBuilder___current_location__eq_t)CALL((recv), (SFT_icode___icode_builder[3] + 22)))
#define CALL_icode___icode_builder___MMSignature___generate_empty_iroutine(recv) ((icode___icode_builder___MMSignature___generate_empty_iroutine_t)CALL((recv), (SFT_icode___icode_builder[4] + 0)))
#define CALL_icode___icode_builder___MMSignature___generate_empty_iclosuredef(recv) ((icode___icode_builder___MMSignature___generate_empty_iclosuredef_t)CALL((recv), (SFT_icode___icode_builder[4] + 1)))
void icode___icode_builder___ICodeBuilder___stmt(val_t p0, val_t p1);
typedef void (*icode___icode_builder___ICodeBuilder___stmt_t)(val_t p0, val_t p1);
val_t icode___icode_builder___ICodeBuilder___expr(val_t p0, val_t p1, val_t p2);
typedef val_t (*icode___icode_builder___ICodeBuilder___expr_t)(val_t p0, val_t p1, val_t p2);
void icode___icode_builder___ICodeBuilder___add_assignment(val_t p0, val_t p1, val_t p2);
typedef void (*icode___icode_builder___ICodeBuilder___add_assignment_t)(val_t p0, val_t p1, val_t p2);
void icode___icode_builder___ICodeBuilder___add_null_reciever_check(val_t p0, val_t p1);
typedef void (*icode___icode_builder___ICodeBuilder___add_null_reciever_check_t)(val_t p0, val_t p1);
void icode___icode_builder___ICodeBuilder___add_type_cast(val_t p0, val_t p1, val_t p2);
typedef void (*icode___icode_builder___ICodeBuilder___add_type_cast_t)(val_t p0, val_t p1, val_t p2);
void icode___icode_builder___ICodeBuilder___add_attr_check(val_t p0, val_t p1, val_t p2);
typedef void (*icode___icode_builder___ICodeBuilder___add_attr_check_t)(val_t p0, val_t p1, val_t p2);
val_t icode___icode_builder___ICodeBuilder___add_attr_read(val_t p0, val_t p1, val_t p2);
typedef val_t (*icode___icode_builder___ICodeBuilder___add_attr_read_t)(val_t p0, val_t p1, val_t p2);
void icode___icode_builder___ICodeBuilder___add_abort(val_t p0, val_t p1);
typedef void (*icode___icode_builder___ICodeBuilder___add_abort_t)(val_t p0, val_t p1);
void icode___icode_builder___ICodeBuilder___add_return_value(val_t p0, val_t p1);
typedef void (*icode___icode_builder___ICodeBuilder___add_return_value_t)(val_t p0, val_t p1);
val_t icode___icode_builder___ICodeBuilder___add_call(val_t p0, val_t p1, val_t p2, val_t p3);
typedef val_t (*icode___icode_builder___ICodeBuilder___add_call_t)(val_t p0, val_t p1, val_t p2, val_t p3);
void icode___icode_builder___ICodeBuilder___add_escape(val_t p0, val_t p1);
typedef void (*icode___icode_builder___ICodeBuilder___add_escape_t)(val_t p0, val_t p1);
val_t icode___icode_builder___ICodeBuilder___lit_null_reg(val_t p0);
typedef val_t (*icode___icode_builder___ICodeBuilder___lit_null_reg_t)(val_t p0);
val_t icode___icode_builder___ICodeBuilder___lit_true_reg(val_t p0);
typedef val_t (*icode___icode_builder___ICodeBuilder___lit_true_reg_t)(val_t p0);
val_t icode___icode_builder___ICodeBuilder___lit_false_reg(val_t p0);
typedef val_t (*icode___icode_builder___ICodeBuilder___lit_false_reg_t)(val_t p0);
val_t icode___icode_builder___ICodeBuilder___new_register(val_t p0, val_t p1);
typedef val_t (*icode___icode_builder___ICodeBuilder___new_register_t)(val_t p0, val_t p1);
val_t icode___icode_builder___ICodeBuilder___mmmodule(val_t p0);
typedef val_t (*icode___icode_builder___ICodeBuilder___mmmodule_t)(val_t p0);
val_t icode___icode_builder___ICodeBuilder___iroutine(val_t p0);
typedef val_t (*icode___icode_builder___ICodeBuilder___iroutine_t)(val_t p0);
val_t icode___icode_builder___ICodeBuilder___seq(val_t p0);
typedef val_t (*icode___icode_builder___ICodeBuilder___seq_t)(val_t p0);
void icode___icode_builder___ICodeBuilder___seq__eq(val_t p0, val_t p1);
typedef void (*icode___icode_builder___ICodeBuilder___seq__eq_t)(val_t p0, val_t p1);
void icode___icode_builder___ICodeBuilder___init(val_t p0, val_t p1, val_t p2, int* init_table);
typedef void (*icode___icode_builder___ICodeBuilder___init_t)(val_t p0, val_t p1, val_t p2, int* init_table);
val_t NEW_ICodeBuilder_icode___icode_builder___ICodeBuilder___init(val_t p0, val_t p1);
val_t icode___icode_builder___ICodeBuilder___current_location(val_t p0);
typedef val_t (*icode___icode_builder___ICodeBuilder___current_location_t)(val_t p0);
void icode___icode_builder___ICodeBuilder___current_location__eq(val_t p0, val_t p1);
typedef void (*icode___icode_builder___ICodeBuilder___current_location__eq_t)(val_t p0, val_t p1);
val_t icode___icode_builder___MMSignature___generate_empty_iroutine(val_t p0);
typedef val_t (*icode___icode_builder___MMSignature___generate_empty_iroutine_t)(val_t p0);
val_t icode___icode_builder___MMSignature___generate_empty_iclosuredef(val_t p0, val_t p1);
typedef val_t (*icode___icode_builder___MMSignature___generate_empty_iclosuredef_t)(val_t p0, val_t p1);
val_t NEW_MMSignature_metamodel___static_type___MMSignature___init(val_t p0, val_t p1, val_t p2);
#endif
