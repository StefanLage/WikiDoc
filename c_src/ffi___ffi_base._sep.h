/* This C header file is generated by NIT to compile modules and programs that requires ./ffi/ffi_base. */
#ifndef ffi___ffi_base_sep
#define ffi___ffi_base_sep
#include "native_interface._sep.h"
#include "c_tools._sep.h"
#include <nit_common.h>

extern const classtable_elt_t VFT_ffi___ffi_base___FFIVisited[];

extern const classtable_elt_t VFT_ffi___ffi_base___ExternImportSet[];

extern const classtable_elt_t VFT_ffi___ffi_base___FFIVisitor[];
extern const char LOCATE_ffi___ffi_base[];
extern const int SFT_ffi___ffi_base[];
#define ID_ffi___ffi_base___FFIVisited (SFT_ffi___ffi_base[0])
#define COLOR_ffi___ffi_base___FFIVisited (SFT_ffi___ffi_base[1])
#define INIT_TABLE_POS_ffi___ffi_base___FFIVisited (SFT_ffi___ffi_base[2] + 0)
#define CALL_ffi___ffi_base___FFIVisited___accept_ffi_visitor(recv) ((ffi___ffi_base___FFIVisited___accept_ffi_visitor_t)CALL((recv), (SFT_ffi___ffi_base[2] + 1)))
#define ATTR_ffi___ffi_base___ExternCode_____atlanguage_lowered(recv) ATTR(recv, (SFT_ffi___ffi_base[3] + 0))
#define CALL_ffi___ffi_base___ExternCode___language_lowered(recv) ((ffi___ffi_base___ExternCode___language_lowered_t)CALL((recv), (SFT_ffi___ffi_base[4] + 0)))
#define CALL_ffi___ffi_base___ExternCode___language_lowered__eq(recv) ((ffi___ffi_base___ExternCode___language_lowered__eq_t)CALL((recv), (SFT_ffi___ffi_base[4] + 1)))
#define CALL_SUPER_ffi___ffi_base___ExternCode___init(recv) ((ffi___ffi_base___ExternCode___init_t)CALL((recv), (SFT_ffi___ffi_base[4] + 2)))
#define ID_ffi___ffi_base___ExternImportSet (SFT_ffi___ffi_base[5])
#define COLOR_ffi___ffi_base___ExternImportSet (SFT_ffi___ffi_base[6])
#define ATTR_ffi___ffi_base___ExternImportSet_____atcallbacks(recv) ATTR(recv, (SFT_ffi___ffi_base[7] + 0))
#define ATTR_ffi___ffi_base___ExternImportSet_____atsupers(recv) ATTR(recv, (SFT_ffi___ffi_base[7] + 1))
#define ATTR_ffi___ffi_base___ExternImportSet_____attypes(recv) ATTR(recv, (SFT_ffi___ffi_base[7] + 2))
#define ATTR_ffi___ffi_base___ExternImportSet_____atcasts(recv) ATTR(recv, (SFT_ffi___ffi_base[7] + 3))
#define INIT_TABLE_POS_ffi___ffi_base___ExternImportSet (SFT_ffi___ffi_base[8] + 0)
#define CALL_ffi___ffi_base___ExternImportSet___callbacks(recv) ((ffi___ffi_base___ExternImportSet___callbacks_t)CALL((recv), (SFT_ffi___ffi_base[8] + 1)))
#define CALL_ffi___ffi_base___ExternImportSet___callbacks__eq(recv) ((ffi___ffi_base___ExternImportSet___callbacks__eq_t)CALL((recv), (SFT_ffi___ffi_base[8] + 2)))
#define CALL_ffi___ffi_base___ExternImportSet___supers(recv) ((ffi___ffi_base___ExternImportSet___supers_t)CALL((recv), (SFT_ffi___ffi_base[8] + 3)))
#define CALL_ffi___ffi_base___ExternImportSet___supers__eq(recv) ((ffi___ffi_base___ExternImportSet___supers__eq_t)CALL((recv), (SFT_ffi___ffi_base[8] + 4)))
#define CALL_ffi___ffi_base___ExternImportSet___types(recv) ((ffi___ffi_base___ExternImportSet___types_t)CALL((recv), (SFT_ffi___ffi_base[8] + 5)))
#define CALL_ffi___ffi_base___ExternImportSet___types__eq(recv) ((ffi___ffi_base___ExternImportSet___types__eq_t)CALL((recv), (SFT_ffi___ffi_base[8] + 6)))
#define CALL_ffi___ffi_base___ExternImportSet___casts(recv) ((ffi___ffi_base___ExternImportSet___casts_t)CALL((recv), (SFT_ffi___ffi_base[8] + 7)))
#define CALL_ffi___ffi_base___ExternImportSet___casts__eq(recv) ((ffi___ffi_base___ExternImportSet___casts__eq_t)CALL((recv), (SFT_ffi___ffi_base[8] + 8)))
#define CALL_ffi___ffi_base___ExternImportSet___init(recv) ((ffi___ffi_base___ExternImportSet___init_t)CALL((recv), (SFT_ffi___ffi_base[8] + 9)))
#define CALL_ffi___ffi_base___MMLocalClass___c_type(recv) ((ffi___ffi_base___MMLocalClass___c_type_t)CALL((recv), (SFT_ffi___ffi_base[9] + 0)))
#define ID_ffi___ffi_base___FFIVisitor (SFT_ffi___ffi_base[10])
#define COLOR_ffi___ffi_base___FFIVisitor (SFT_ffi___ffi_base[11])
#define ATTR_ffi___ffi_base___FFIVisitor_____attc(recv) ATTR(recv, (SFT_ffi___ffi_base[12] + 0))
#define ATTR_ffi___ffi_base___FFIVisitor_____atmmmodule(recv) ATTR(recv, (SFT_ffi___ffi_base[12] + 1))
#define ATTR_ffi___ffi_base___FFIVisitor_____atcompilation_unit(recv) ATTR(recv, (SFT_ffi___ffi_base[12] + 2))
#define INIT_TABLE_POS_ffi___ffi_base___FFIVisitor (SFT_ffi___ffi_base[13] + 0)
#define CALL_ffi___ffi_base___FFIVisitor___tc(recv) ((ffi___ffi_base___FFIVisitor___tc_t)CALL((recv), (SFT_ffi___ffi_base[13] + 1)))
#define CALL_ffi___ffi_base___FFIVisitor___tc__eq(recv) ((ffi___ffi_base___FFIVisitor___tc__eq_t)CALL((recv), (SFT_ffi___ffi_base[13] + 2)))
#define CALL_ffi___ffi_base___FFIVisitor___mmmodule(recv) ((ffi___ffi_base___FFIVisitor___mmmodule_t)CALL((recv), (SFT_ffi___ffi_base[13] + 3)))
#define CALL_ffi___ffi_base___FFIVisitor___mmmodule__eq(recv) ((ffi___ffi_base___FFIVisitor___mmmodule__eq_t)CALL((recv), (SFT_ffi___ffi_base[13] + 4)))
#define CALL_ffi___ffi_base___FFIVisitor___compilation_unit(recv) ((ffi___ffi_base___FFIVisitor___compilation_unit_t)CALL((recv), (SFT_ffi___ffi_base[13] + 5)))
#define CALL_ffi___ffi_base___FFIVisitor___compilation_unit__eq(recv) ((ffi___ffi_base___FFIVisitor___compilation_unit__eq_t)CALL((recv), (SFT_ffi___ffi_base[13] + 6)))
#define CALL_ffi___ffi_base___FFIVisitor___init(recv) ((ffi___ffi_base___FFIVisitor___init_t)CALL((recv), (SFT_ffi___ffi_base[13] + 7)))
void ffi___ffi_base___FFIVisited___accept_ffi_visitor(val_t p0, val_t p1);
typedef void (*ffi___ffi_base___FFIVisited___accept_ffi_visitor_t)(val_t p0, val_t p1);
void ffi___ffi_base___ExternCode___accept_ffi_visitor(val_t p0, val_t p1);
typedef void (*ffi___ffi_base___ExternCode___accept_ffi_visitor_t)(val_t p0, val_t p1);
val_t ffi___ffi_base___ExternCode___language_lowered(val_t p0);
typedef val_t (*ffi___ffi_base___ExternCode___language_lowered_t)(val_t p0);
void ffi___ffi_base___ExternCode___language_lowered__eq(val_t p0, val_t p1);
typedef void (*ffi___ffi_base___ExternCode___language_lowered__eq_t)(val_t p0, val_t p1);
void ffi___ffi_base___ExternCode___init(val_t p0, val_t p1, val_t p2, val_t p3, int* init_table);
typedef void (*ffi___ffi_base___ExternCode___init_t)(val_t p0, val_t p1, val_t p2, val_t p3, int* init_table);
val_t NEW_ExternCode_syntax___extern_inline___ExternCode___init(val_t p0, val_t p1, val_t p2);
void ffi___ffi_base___MMMethod___accept_ffi_visitor(val_t p0, val_t p1);
typedef void (*ffi___ffi_base___MMMethod___accept_ffi_visitor_t)(val_t p0, val_t p1);
val_t NEW_MMMethod_metamodel___abstractmetamodel___MMLocalProperty___init(val_t p0, val_t p1);
val_t ffi___ffi_base___ExternImportSet___callbacks(val_t p0);
typedef val_t (*ffi___ffi_base___ExternImportSet___callbacks_t)(val_t p0);
void ffi___ffi_base___ExternImportSet___callbacks__eq(val_t p0, val_t p1);
typedef void (*ffi___ffi_base___ExternImportSet___callbacks__eq_t)(val_t p0, val_t p1);
val_t ffi___ffi_base___ExternImportSet___supers(val_t p0);
typedef val_t (*ffi___ffi_base___ExternImportSet___supers_t)(val_t p0);
void ffi___ffi_base___ExternImportSet___supers__eq(val_t p0, val_t p1);
typedef void (*ffi___ffi_base___ExternImportSet___supers__eq_t)(val_t p0, val_t p1);
val_t ffi___ffi_base___ExternImportSet___types(val_t p0);
typedef val_t (*ffi___ffi_base___ExternImportSet___types_t)(val_t p0);
void ffi___ffi_base___ExternImportSet___types__eq(val_t p0, val_t p1);
typedef void (*ffi___ffi_base___ExternImportSet___types__eq_t)(val_t p0, val_t p1);
val_t ffi___ffi_base___ExternImportSet___casts(val_t p0);
typedef val_t (*ffi___ffi_base___ExternImportSet___casts_t)(val_t p0);
void ffi___ffi_base___ExternImportSet___casts__eq(val_t p0, val_t p1);
typedef void (*ffi___ffi_base___ExternImportSet___casts__eq_t)(val_t p0, val_t p1);
void ffi___ffi_base___ExternImportSet___init(val_t p0, int* init_table);
typedef void (*ffi___ffi_base___ExternImportSet___init_t)(val_t p0, int* init_table);
val_t NEW_ExternImportSet_ffi___ffi_base___ExternImportSet___init();
val_t ffi___ffi_base___MMLocalClass___c_type(val_t p0);
typedef val_t (*ffi___ffi_base___MMLocalClass___c_type_t)(val_t p0);
val_t NEW_MMLocalClass_metamodel___abstractmetamodel___MMLocalClass___init(val_t p0, val_t p1, val_t p2);
void ffi___ffi_base___MMModule___accept_ffi_visitor(val_t p0, val_t p1);
typedef void (*ffi___ffi_base___MMModule___accept_ffi_visitor_t)(val_t p0, val_t p1);
  typedef void (*CLOS_OC_ffi___ffi_base___MMModule___accept_ffi_visitor_1_0)(struct stack_frame_t *);
  void OC_ffi___ffi_base___MMModule___accept_ffi_visitor_1(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
  typedef void (*OC_ffi___ffi_base___MMModule___accept_ffi_visitor_1_t)(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
    typedef void (*CLOS_OC_ffi___ffi_base___MMModule___accept_ffi_visitor_2_0)(struct stack_frame_t *);
    void OC_ffi___ffi_base___MMModule___accept_ffi_visitor_2(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
    typedef void (*OC_ffi___ffi_base___MMModule___accept_ffi_visitor_2_t)(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
  typedef void (*CLOS_OC_ffi___ffi_base___MMModule___accept_ffi_visitor_3_0)(struct stack_frame_t *);
  void OC_ffi___ffi_base___MMModule___accept_ffi_visitor_3(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
  typedef void (*OC_ffi___ffi_base___MMModule___accept_ffi_visitor_3_t)(struct stack_frame_t *closctx, val_t p0, struct stack_frame_t *closctx_param, fun_t clos_fun0);
val_t NEW_MMModule_metamodel___abstractmetamodel___MMModule___init(val_t p0, val_t p1, val_t p2, val_t p3);
val_t ffi___ffi_base___FFIVisitor___tc(val_t p0);
typedef val_t (*ffi___ffi_base___FFIVisitor___tc_t)(val_t p0);
void ffi___ffi_base___FFIVisitor___tc__eq(val_t p0, val_t p1);
typedef void (*ffi___ffi_base___FFIVisitor___tc__eq_t)(val_t p0, val_t p1);
val_t ffi___ffi_base___FFIVisitor___mmmodule(val_t p0);
typedef val_t (*ffi___ffi_base___FFIVisitor___mmmodule_t)(val_t p0);
void ffi___ffi_base___FFIVisitor___mmmodule__eq(val_t p0, val_t p1);
typedef void (*ffi___ffi_base___FFIVisitor___mmmodule__eq_t)(val_t p0, val_t p1);
val_t ffi___ffi_base___FFIVisitor___compilation_unit(val_t p0);
typedef val_t (*ffi___ffi_base___FFIVisitor___compilation_unit_t)(val_t p0);
void ffi___ffi_base___FFIVisitor___compilation_unit__eq(val_t p0, val_t p1);
typedef void (*ffi___ffi_base___FFIVisitor___compilation_unit__eq_t)(val_t p0, val_t p1);
void ffi___ffi_base___FFIVisitor___init(val_t p0, val_t p1, val_t p2, int* init_table);
typedef void (*ffi___ffi_base___FFIVisitor___init_t)(val_t p0, val_t p1, val_t p2, int* init_table);
val_t NEW_FFIVisitor_ffi___ffi_base___FFIVisitor___init(val_t p0, val_t p1);
#endif
