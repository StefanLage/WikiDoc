/* This C header file is generated by NIT to compile modules and programs that requires ./syntax/scope. */
#ifndef syntax___scope_sep
#define syntax___scope_sep
#include "syntax___flow._sep.h"
#include <nit_common.h>

extern const classtable_elt_t VFT_syntax___scope___ScopeContext[];

extern const classtable_elt_t VFT_syntax___scope___ScopeBlock[];

extern const classtable_elt_t VFT_syntax___scope___EscapableBlock[];

extern const classtable_elt_t VFT_syntax___scope___BreakOnlyEscapableBlock[];

extern const classtable_elt_t VFT_syntax___scope___EscapableClosure[];

extern const classtable_elt_t VFT_syntax___scope___AEscapeExpr[];
extern const char LOCATE_syntax___scope[];
extern const int SFT_syntax___scope[];
#define ID_syntax___scope___ScopeContext (SFT_syntax___scope[0])
#define COLOR_syntax___scope___ScopeContext (SFT_syntax___scope[1])
#define ATTR_syntax___scope___ScopeContext____stack(recv) ATTR(recv, (SFT_syntax___scope[2] + 0))
#define ATTR_syntax___scope___ScopeContext____variables(recv) ATTR(recv, (SFT_syntax___scope[2] + 1))
#define ATTR_syntax___scope___ScopeContext____visitor(recv) ATTR(recv, (SFT_syntax___scope[2] + 2))
#define INIT_TABLE_POS_syntax___scope___ScopeContext (SFT_syntax___scope[3] + 0)
#define CALL_syntax___scope___ScopeContext_____bra(recv) ((syntax___scope___ScopeContext_____bra_t)CALL((recv), (SFT_syntax___scope[3] + 1)))
#define CALL_syntax___scope___ScopeContext___add_variable(recv) ((syntax___scope___ScopeContext___add_variable_t)CALL((recv), (SFT_syntax___scope[3] + 2)))
#define CALL_syntax___scope___ScopeContext___push(recv) ((syntax___scope___ScopeContext___push_t)CALL((recv), (SFT_syntax___scope[3] + 3)))
#define CALL_syntax___scope___ScopeContext___push_escapable(recv) ((syntax___scope___ScopeContext___push_escapable_t)CALL((recv), (SFT_syntax___scope[3] + 4)))
#define CALL_syntax___scope___ScopeContext___head(recv) ((syntax___scope___ScopeContext___head_t)CALL((recv), (SFT_syntax___scope[3] + 5)))
#define CALL_syntax___scope___ScopeContext___get_by_label(recv) ((syntax___scope___ScopeContext___get_by_label_t)CALL((recv), (SFT_syntax___scope[3] + 6)))
#define CALL_syntax___scope___ScopeContext___pop(recv) ((syntax___scope___ScopeContext___pop_t)CALL((recv), (SFT_syntax___scope[3] + 7)))
#define CALL_syntax___scope___ScopeContext___visitor(recv) ((syntax___scope___ScopeContext___visitor_t)CALL((recv), (SFT_syntax___scope[3] + 8)))
#define CALL_syntax___scope___ScopeContext___init(recv) ((syntax___scope___ScopeContext___init_t)CALL((recv), (SFT_syntax___scope[3] + 9)))
#define ID_syntax___scope___ScopeBlock (SFT_syntax___scope[4])
#define COLOR_syntax___scope___ScopeBlock (SFT_syntax___scope[5])
#define ATTR_syntax___scope___ScopeBlock____node(recv) ATTR(recv, (SFT_syntax___scope[6] + 0))
#define ATTR_syntax___scope___ScopeBlock____dico(recv) ATTR(recv, (SFT_syntax___scope[6] + 1))
#define INIT_TABLE_POS_syntax___scope___ScopeBlock (SFT_syntax___scope[7] + 0)
#define CALL_syntax___scope___ScopeBlock___node(recv) ((syntax___scope___ScopeBlock___node_t)CALL((recv), (SFT_syntax___scope[7] + 1)))
#define CALL_syntax___scope___ScopeBlock___add_variable(recv) ((syntax___scope___ScopeBlock___add_variable_t)CALL((recv), (SFT_syntax___scope[7] + 2)))
#define CALL_syntax___scope___ScopeBlock___get_variable(recv) ((syntax___scope___ScopeBlock___get_variable_t)CALL((recv), (SFT_syntax___scope[7] + 3)))
#define CALL_syntax___scope___ScopeBlock___init(recv) ((syntax___scope___ScopeBlock___init_t)CALL((recv), (SFT_syntax___scope[7] + 4)))
#define ID_syntax___scope___EscapableBlock (SFT_syntax___scope[8])
#define COLOR_syntax___scope___EscapableBlock (SFT_syntax___scope[9])
#define ATTR_syntax___scope___EscapableBlock____lab(recv) ATTR(recv, (SFT_syntax___scope[10] + 0))
#define ATTR_syntax___scope___EscapableBlock____lab_location(recv) ATTR(recv, (SFT_syntax___scope[10] + 1))
#define ATTR_syntax___scope___EscapableBlock____break_flow_contexts(recv) ATTR(recv, (SFT_syntax___scope[10] + 2))
#define INIT_TABLE_POS_syntax___scope___EscapableBlock (SFT_syntax___scope[11] + 0)
#define CALL_syntax___scope___EscapableBlock___lab(recv) ((syntax___scope___EscapableBlock___lab_t)CALL((recv), (SFT_syntax___scope[11] + 1)))
#define CALL_syntax___scope___EscapableBlock___lab_location(recv) ((syntax___scope___EscapableBlock___lab_location_t)CALL((recv), (SFT_syntax___scope[11] + 2)))
#define CALL_syntax___scope___EscapableBlock___is_break_block(recv) ((syntax___scope___EscapableBlock___is_break_block_t)CALL((recv), (SFT_syntax___scope[11] + 3)))
#define CALL_syntax___scope___EscapableBlock___break_list(recv) ((syntax___scope___EscapableBlock___break_list_t)CALL((recv), (SFT_syntax___scope[11] + 4)))
#define CALL_syntax___scope___EscapableBlock___continue_stype(recv) ((syntax___scope___EscapableBlock___continue_stype_t)CALL((recv), (SFT_syntax___scope[11] + 5)))
#define CALL_syntax___scope___EscapableBlock___break_flow_contexts(recv) ((syntax___scope___EscapableBlock___break_flow_contexts_t)CALL((recv), (SFT_syntax___scope[11] + 6)))
#define CALL_syntax___scope___EscapableBlock___init(recv) ((syntax___scope___EscapableBlock___init_t)CALL((recv), (SFT_syntax___scope[11] + 7)))
#define ID_syntax___scope___BreakOnlyEscapableBlock (SFT_syntax___scope[12])
#define COLOR_syntax___scope___BreakOnlyEscapableBlock (SFT_syntax___scope[13])
#define INIT_TABLE_POS_syntax___scope___BreakOnlyEscapableBlock (SFT_syntax___scope[14] + 0)
#define CALL_syntax___scope___BreakOnlyEscapableBlock___init(recv) ((syntax___scope___BreakOnlyEscapableBlock___init_t)CALL((recv), (SFT_syntax___scope[14] + 1)))
#define ID_syntax___scope___EscapableClosure (SFT_syntax___scope[15])
#define COLOR_syntax___scope___EscapableClosure (SFT_syntax___scope[16])
#define ATTR_syntax___scope___EscapableClosure____closure(recv) ATTR(recv, (SFT_syntax___scope[17] + 0))
#define ATTR_syntax___scope___EscapableClosure____break_list(recv) ATTR(recv, (SFT_syntax___scope[17] + 1))
#define INIT_TABLE_POS_syntax___scope___EscapableClosure (SFT_syntax___scope[18] + 0)
#define CALL_syntax___scope___EscapableClosure___closure(recv) ((syntax___scope___EscapableClosure___closure_t)CALL((recv), (SFT_syntax___scope[18] + 1)))
#define CALL_syntax___scope___EscapableClosure___init(recv) ((syntax___scope___EscapableClosure___init_t)CALL((recv), (SFT_syntax___scope[18] + 2)))
#define ID_syntax___scope___AEscapeExpr (SFT_syntax___scope[19])
#define COLOR_syntax___scope___AEscapeExpr (SFT_syntax___scope[20])
#define ATTR_syntax___scope___AEscapeExpr____escapable(recv) ATTR(recv, (SFT_syntax___scope[21] + 0))
#define INIT_TABLE_POS_syntax___scope___AEscapeExpr (SFT_syntax___scope[22] + 0)
#define CALL_syntax___scope___AEscapeExpr___escapable(recv) ((syntax___scope___AEscapeExpr___escapable_t)CALL((recv), (SFT_syntax___scope[22] + 1)))
#define CALL_syntax___scope___AEscapeExpr___kwname(recv) ((syntax___scope___AEscapeExpr___kwname_t)CALL((recv), (SFT_syntax___scope[22] + 2)))
#define CALL_syntax___scope___AEscapeExpr___compute_escapable_block(recv) ((syntax___scope___AEscapeExpr___compute_escapable_block_t)CALL((recv), (SFT_syntax___scope[22] + 3)))
val_t syntax___scope___ScopeContext_____bra(val_t p0, val_t p1);
typedef val_t (*syntax___scope___ScopeContext_____bra_t)(val_t p0, val_t p1);
void syntax___scope___ScopeContext___add_variable(val_t p0, val_t p1);
typedef void (*syntax___scope___ScopeContext___add_variable_t)(val_t p0, val_t p1);
void syntax___scope___ScopeContext___push(val_t p0, val_t p1);
typedef void (*syntax___scope___ScopeContext___push_t)(val_t p0, val_t p1);
void syntax___scope___ScopeContext___push_escapable(val_t p0, val_t p1, val_t p2);
typedef void (*syntax___scope___ScopeContext___push_escapable_t)(val_t p0, val_t p1, val_t p2);
val_t syntax___scope___ScopeContext___head(val_t p0);
typedef val_t (*syntax___scope___ScopeContext___head_t)(val_t p0);
val_t syntax___scope___ScopeContext___get_by_label(val_t p0, val_t p1);
typedef val_t (*syntax___scope___ScopeContext___get_by_label_t)(val_t p0, val_t p1);
void syntax___scope___ScopeContext___pop(val_t p0);
typedef void (*syntax___scope___ScopeContext___pop_t)(val_t p0);
val_t syntax___scope___ScopeContext___visitor(val_t p0);
typedef val_t (*syntax___scope___ScopeContext___visitor_t)(val_t p0);
void syntax___scope___ScopeContext___init(val_t p0, val_t p1, int* init_table);
typedef void (*syntax___scope___ScopeContext___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_ScopeContext_syntax___scope___ScopeContext___init(val_t p0);
val_t syntax___scope___ScopeBlock___node(val_t p0);
typedef val_t (*syntax___scope___ScopeBlock___node_t)(val_t p0);
void syntax___scope___ScopeBlock___add_variable(val_t p0, val_t p1);
typedef void (*syntax___scope___ScopeBlock___add_variable_t)(val_t p0, val_t p1);
val_t syntax___scope___ScopeBlock___get_variable(val_t p0, val_t p1);
typedef val_t (*syntax___scope___ScopeBlock___get_variable_t)(val_t p0, val_t p1);
void syntax___scope___ScopeBlock___init(val_t p0, val_t p1, int* init_table);
typedef void (*syntax___scope___ScopeBlock___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_ScopeBlock_syntax___scope___ScopeBlock___init(val_t p0);
val_t syntax___scope___EscapableBlock___lab(val_t p0);
typedef val_t (*syntax___scope___EscapableBlock___lab_t)(val_t p0);
val_t syntax___scope___EscapableBlock___lab_location(val_t p0);
typedef val_t (*syntax___scope___EscapableBlock___lab_location_t)(val_t p0);
val_t syntax___scope___EscapableBlock___is_break_block(val_t p0);
typedef val_t (*syntax___scope___EscapableBlock___is_break_block_t)(val_t p0);
val_t syntax___scope___EscapableBlock___break_list(val_t p0);
typedef val_t (*syntax___scope___EscapableBlock___break_list_t)(val_t p0);
val_t syntax___scope___EscapableBlock___continue_stype(val_t p0);
typedef val_t (*syntax___scope___EscapableBlock___continue_stype_t)(val_t p0);
val_t syntax___scope___EscapableBlock___break_flow_contexts(val_t p0);
typedef val_t (*syntax___scope___EscapableBlock___break_flow_contexts_t)(val_t p0);
void syntax___scope___EscapableBlock___init(val_t p0, val_t p1, int* init_table);
typedef void (*syntax___scope___EscapableBlock___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_EscapableBlock_syntax___scope___EscapableBlock___init(val_t p0);
val_t syntax___scope___BreakOnlyEscapableBlock___is_break_block(val_t p0);
typedef val_t (*syntax___scope___BreakOnlyEscapableBlock___is_break_block_t)(val_t p0);
void syntax___scope___BreakOnlyEscapableBlock___init(val_t p0, val_t p1, int* init_table);
typedef void (*syntax___scope___BreakOnlyEscapableBlock___init_t)(val_t p0, val_t p1, int* init_table);
val_t NEW_BreakOnlyEscapableBlock_syntax___scope___BreakOnlyEscapableBlock___init(val_t p0);
val_t syntax___scope___EscapableClosure___closure(val_t p0);
typedef val_t (*syntax___scope___EscapableClosure___closure_t)(val_t p0);
val_t syntax___scope___EscapableClosure___is_break_block(val_t p0);
typedef val_t (*syntax___scope___EscapableClosure___is_break_block_t)(val_t p0);
val_t syntax___scope___EscapableClosure___break_list(val_t p0);
typedef val_t (*syntax___scope___EscapableClosure___break_list_t)(val_t p0);
val_t syntax___scope___EscapableClosure___continue_stype(val_t p0);
typedef val_t (*syntax___scope___EscapableClosure___continue_stype_t)(val_t p0);
void syntax___scope___EscapableClosure___init(val_t p0, val_t p1, val_t p2, val_t p3, int* init_table);
typedef void (*syntax___scope___EscapableClosure___init_t)(val_t p0, val_t p1, val_t p2, val_t p3, int* init_table);
val_t NEW_EscapableClosure_syntax___scope___EscapableClosure___init(val_t p0, val_t p1, val_t p2);
val_t syntax___scope___AEscapeExpr___escapable(val_t p0);
typedef val_t (*syntax___scope___AEscapeExpr___escapable_t)(val_t p0);
val_t syntax___scope___AEscapeExpr___kwname(val_t p0);
typedef val_t (*syntax___scope___AEscapeExpr___kwname_t)(val_t p0);
val_t syntax___scope___AEscapeExpr___compute_escapable_block(val_t p0, val_t p1);
typedef val_t (*syntax___scope___AEscapeExpr___compute_escapable_block_t)(val_t p0, val_t p1);
val_t NEW_AEscapeExpr_parser___parser_nodes___ANode___init();
val_t syntax___scope___AContinueExpr___kwname(val_t p0);
typedef val_t (*syntax___scope___AContinueExpr___kwname_t)(val_t p0);
val_t NEW_AContinueExpr_parser___parser_prod___AContinueExpr___empty_init();
val_t NEW_AContinueExpr_parser___parser_prod___AContinueExpr___init_acontinueexpr(val_t p0, val_t p1, val_t p2);
val_t NEW_AContinueExpr_parser___parser_nodes___ANode___init();
val_t syntax___scope___ABreakExpr___kwname(val_t p0);
typedef val_t (*syntax___scope___ABreakExpr___kwname_t)(val_t p0);
val_t NEW_ABreakExpr_parser___parser_prod___ABreakExpr___empty_init();
val_t NEW_ABreakExpr_parser___parser_prod___ABreakExpr___init_abreakexpr(val_t p0, val_t p1, val_t p2);
val_t NEW_ABreakExpr_parser___parser_nodes___ANode___init();
#endif
