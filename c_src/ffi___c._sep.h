/* This C header file is generated by NIT to compile modules and programs that requires ./ffi/c. */
#ifndef ffi___c_sep
#define ffi___c_sep
#include "ffi___ffi_base._sep.h"
#include <nit_common.h>
extern const char LOCATE_ffi___c[];
extern const int SFT_ffi___c[];
#define CALL_ffi___c___ExternCode___is_c(recv) ((ffi___c___ExternCode___is_c_t)CALL((recv), (SFT_ffi___c[0] + 0)))
#define CALL_ffi___c___ExternCode___is_c_body(recv) ((ffi___c___ExternCode___is_c_body_t)CALL((recv), (SFT_ffi___c[0] + 1)))
#define CALL_ffi___c___ExternCode___is_c_header(recv) ((ffi___c___ExternCode___is_c_header_t)CALL((recv), (SFT_ffi___c[0] + 2)))
#define CALL_SUPER_ffi___c___MMMethod___accept_ffi_visitor(recv) ((ffi___c___MMMethod___accept_ffi_visitor_t)CALL((recv), (SFT_ffi___c[1] + 0)))
#define CALL_ffi___c___Location___as_line_pragma(recv) ((ffi___c___Location___as_line_pragma_t)CALL((recv), (SFT_ffi___c[2] + 0)))
val_t ffi___c___ExternCode___is_c(val_t p0);
typedef val_t (*ffi___c___ExternCode___is_c_t)(val_t p0);
val_t ffi___c___ExternCode___is_c_body(val_t p0);
typedef val_t (*ffi___c___ExternCode___is_c_body_t)(val_t p0);
val_t ffi___c___ExternCode___is_c_header(val_t p0);
typedef val_t (*ffi___c___ExternCode___is_c_header_t)(val_t p0);
void ffi___c___ExternCode___accept_ffi_visitor(val_t p0, val_t p1);
typedef void (*ffi___c___ExternCode___accept_ffi_visitor_t)(val_t p0, val_t p1);
val_t NEW_ExternCode_syntax___extern_inline___ExternCode___init(val_t p0, val_t p1, val_t p2);
void ffi___c___MMMethod___accept_ffi_visitor(val_t p0, val_t p1);
typedef void (*ffi___c___MMMethod___accept_ffi_visitor_t)(val_t p0, val_t p1);
val_t NEW_MMMethod_metamodel___abstractmetamodel___MMLocalProperty___init(val_t p0, val_t p1);
val_t ffi___c___Location___as_line_pragma(val_t p0);
typedef val_t (*ffi___c___Location___as_line_pragma_t)(val_t p0);
val_t NEW_Location_location___Location___init(val_t p0, val_t p1, val_t p2, val_t p3, val_t p4);
val_t NEW_Location_location___Location___with_file(val_t p0);
#endif
